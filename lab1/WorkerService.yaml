openapi: 3.0.1
info:
  title: Workers service REST endpoints
  description: COA lab1 Вариант 13104
  version: 1.0.0
servers:
  - url: https://localhost:78788/api/v1
tags:
  - name: Worker
paths:
  /company/workers/{id}:
    get:
      tags:
        - Worker
      summary: get worker by id
      description: get worker by id
      operationId: getWorkerById
      parameters:
        - name: id
          in: path
          required: true
          description: Worker id to find
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 0
            exclusiveMinimum: true
            example: 1
      responses:
        "200":
          description: Returns worker by id
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/WorkerFullInfo"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Worker
      summary: update existing worker by id
      description: update existing worker by id
      operationId: updateWorkerById
      parameters:
        - name: id
          in: path
          required: true
          description: Worker id to find
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 0
            exclusiveMinimum: true
            example: 1
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/WorkerInfo"
      responses:
        "200":
          description: updated worker
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/WorkerFullInfo"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Worker
      summary: delete existing worker by id
      description: delete existing worker by id
      operationId: deleteWorkerById
      parameters:
        - name: id
          in: path
          required: true
          description: Coordinate id to find
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 0
            exclusiveMinimum: true
            example: 1
      responses:
        "204":
          description: The worker was deleted successfully
          content:
            application/xml:
              schema:
                xml:
                  name: Error
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: The worker was deleted successfully
                  time:
                    type: string
                    format: date-time
                    example: 2023-10-13T00:00:00Z
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
  /company/workers:
    get:
      tags:
        - Worker
      summary: returns workers in sort
      description: returns workers in sort
      operationId: getWorkers
      parameters:
        - name: sortElements
          in: query
          required: false
          description: sort should be done by any combination of all fields in object. It means that in request should have an array where we save all fields, by which sorted result.
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - name
                - creationDate
                - coordinates.x
                - coordinates.y
                - salary
                - creationDate
                - startDate
                - endDate
                - position
                - organization.name
                - organization.annualTurnover
        - name: isUpper
          in: query
          required: false
          description: The order of result.
          schema:
            type: boolean
            default: true
        - name: filter
          in: query
          required: false
          description: Array of fields used for filtering.
          schema:
            type: array
            example: id[eq]=2
            items:
              type: string
              pattern: '^(id|creationDate|coordinates\.x|coordinates\.y|salary|startDate|endDate|position|view|organization\.annualTurnover|organization.\fullName)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
        - name: pageSize
          in: query
          required: false
          description: page size for pagination
          schema:
            type: integer
            format: int32
            nullable: false
            minimum: 1
            default: 1
            exclusiveMinimum: false
            example: 1
        - name: page
          in: query
          required: false
          description: page number to be paginated
          schema:
            type: integer
            format: int32
            nullable: false
            default: 0
            minimum: 0
            exclusiveMinimum: false
            example: 0
      responses:
        "200":
          description: Returned all workers by requirements
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/SortedWorkersResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Worker
      summary: create a new worker in company
      description: create a new worker in company
      operationId: createWorker
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateWorkerRequest"
      responses:
        "200":
          description: Returns the worker that was just added
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/WorkerFullInfo"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
  /company/workers/maxSalary:
    get:
      tags:
        - Worker
      summary: get worker, whose salary is the highest
      description: get worker, whose salary is the highest
      operationId: getWorkerWithHighestSalary
      responses:
        "200":
          description: Returns worker w highest salary
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/WorkerFullInfo"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"
  /company/workers/getAmountByEndDate:
    get:
      tags:
        - Worker
      summary: get number of all workers, whose end date equals or later than given(by our choices)
      description: get number of all workers, whose end date equals or later than given(by our choices)
      operationId: getWorkersByEndDate
      parameters:
        - name: "endDate"
          in: query
          description: end date
          required: true
          schema:
            type: string
            format: date
            example: "2022-12-31"
            nullable: false
        - name: "condition"
          in: query
          description: greater or equals
          required: true
          schema:
            type: string
            enum:
              - greater
              - equals
            nullable: false
      responses:
        "200":
          description: Returns number of workers, who satisfies the condition
          content:
            application/xml:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                    example: 256
                xml:
                  name: NumberOfWorkers
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
        default:
          description: Unexpected error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Coordinates:
      type: object
      properties:
        x:
          type: integer
          format: int32
          nullable: false
          example: 12
        y:
          type: number
          format: double
          minimum: -561
          exclusiveMinimum: true
          nullable: false
          example: -560
    Organization:
      type: object
      properties:
        id:
          type: integer
          nullable: false
          minimum: 0
          exclusiveMinimum: true
          example: 121
        fullName:
          type: string
          nullable: false
          maxLength: 758
          example: "Google"
        annualTurnover:
          type: integer
          nullable: false
          minimum: 0
          exclusiveMinimum: true
          example: 654000000
    WorkerFullInfo:
      xml:
        name: "WorkerFullInfo"
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          exclusiveMinimum: false
          description: Unique identifier of worker. be generated automatically
          example: 1
        name:
          type: string
          nullable: false
          minLength: 1
          example: "liao"
        Coordinates:
          $ref: "#/components/schemas/Coordinates"
        creationDate:
          type: string
          format: date-time
          nullable: false
          description: Be generated automatically
          example: "2023-09-10T00:00:00Z"
        salary:
          type: number
          format: float
          nullable: false
          minimum: 0
          exclusiveMinimum: true
          example: 23333
        startDate:
          type: string
          format: date
          nullable: false
          example: "2022-09-19"
        endDate:
          type: string
          format: date
          nullable: false
          example: "2022-12-31"
        position:
          type: string
          enum:
            - MANAGER
            - HUMAN_RESOURCES
            - HEAD_OF_DEPARTMENT
            - DEVELOPER
            - COOK
          nullable: false
          example: "MANAGER"
        Organization:
          $ref: "#/components/schemas/Organization"
    WorkerInfo:
      xml:
        name: "WorkerInfo"
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          example: "liao"
        Coordinates:
          $ref: "#/components/schemas/Coordinates"
        creationDate:
          type: string
          format: date-time
          nullable: false
          description: Be generated automatically
          example: "2023-09-10T00:00:00Z"
        salary:
          type: number
          format: float
          nullable: false
          minimum: 0
          exclusiveMinimum: true
          example: 23333
        startDate:
          type: string
          format: date
          nullable: false
          example: "2023-09-19"
        endDate:
          type: string
          format: date
          nullable: false
          example: "2023-12-31"
        position:
          type: string
          enum:
            - MANAGER
            - HUMAN_RESOURCES
            - HEAD_OF_DEPARTMENT
            - DEVELOPER
            - COOK
          nullable: false
          example: "MANAGER"
        Organization:
          $ref: "#/components/schemas/Organization"
    CreateWorkerRequest:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          example: "liao"
        coordinates:
          $ref: "#/components/schemas/Coordinates"
        salary:
          type: number
          format: float
          nullable: false
          minimum: 0
          exclusiveMinimum: true
          example: 23333
        startDate:
          type: string
          format: date
          nullable: false
          example: "2022-09-19"
        endDate:
          type: string
          format: date
          nullable: false
          example: "2022-12-31"
        position:
          type: string
          enum:
            - MANAGER
            - HUMAN_RESOURCES
            - HEAD_OF_DEPARTMENT
            - DEVELOPER
            - COOK
          nullable: false
          example: "MANAGER"
        organization:
          $ref: "#/components/schemas/Organization"
    SortedWorkersResponse:
      type: object
      properties:
        pagenumber:
          type: integer
          description: Номер текущей страницы
          format: int32
        numberOfElements:
          type: integer
          description: Количество элементов на текущей странице
          format: int32
        first:
          type: boolean
          description: Является ли данная страница первой
        last:
          type: boolean
          description: Является ли данная страница последней
        hasNext:
          type: boolean
          description: Имеется ли следующая страница
        hasPrevious:
          type: boolean
          description: Имеется ли предыдущая страница
        totalPages:
          type: integer
          description: Количество страниц
          format: int32
        totalElements:
          type: integer
          description: Общее количество элементов
          format: int64
        hasContent:
          type: boolean
          description: Имеется ли содержимое
        content:
          type: array
          xml:
            name: content
            wrapped: true
          description: Содержимое в виде списка элементов
          items:
            $ref: "#/components/schemas/WorkerFullInfo"
    Error:
      xml:
        name: Error
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 405
        message:
          type: string
          example: HTTP method is not supported
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/xml:
          schema:
            xml:
              name: Error
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              message:
                type: string
                example: The specified resource was not found
    InvalidRequest:
      description: Invalid request
      content:
        application/xml:
          schema:
            xml:
              name: Error
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              message:
                type: string
                example: Invalid request
    InternalServerError:
      description: Internal server error
      content:
        application/xml:
          schema:
            xml:
              name: Error
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              message:
                type: string
                example: Internal server error
